<% include partials/header %>

<!-- Print/save image -->
<script type="text/javascript" src="/lib/jQuery.print.js"></script>
<script type="text/javascript" src="/js/imagePrint.js"></script>

<nav class="navbar navbar-expand-md navbar-light bg-light">
    <div class="container col-12 col-lg-8">
        <a class="navbar-brand" href="/">DeepDom</a>
        <button class="navbar-toggler ml-3" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>

        <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav mr-auto">
                <li class="nav-item">
                    <a class="nav-link" href="/upload"><i class="fas fa-home"></i> Upload </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/jobs"><i class="fas fa-search"></i> Search </a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/jobs/all"><i class="fas fa-list"></i> Status </a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<div class="jumbotron jumbotron-fluid text-center">
    <div class="container">
        <h1 class="display-4"><span class="border-bottom border-dark p-1">DeepDom</span></h1>
        <p class="lead d-none d-sm-block">An ab-initio method for protein domain boundary prediction</p>
    </div>
</div>

<div class="container col-12 col-lg-8 ">
    <div class="btn-toolbar d-flex justify-content-start" role="toolbar" aria-label="Toolbar with button group">
        <div class="btn-group mr-2" role="group" aria-label="First group">
            <% var address = "/jobs/download/:" + file%>
            <a class="btn btn-secondary" href="<%= address%>">
                Download Result
            </a>
        </div>

        <div class="btn-group mt-4 mt-sm-0" role="group" aria-label="Second group">
            <select class="selectpicker show-tick" multiple data-actions-box="true" data-size="5"
                data-style="btn-secondary" data-width="300px" data-live-search="true"
                title="Choose one of the following...">
                <% for (var i = 0; i < names.length; i++) {%>
                <option value="<%= i%>"> <%= names[i]%></option>
                <% } %>
            </select>
        </div>
    </div>
</div>

<div id="allContainer" class="container border rounded shadow-lg mt-4 pt-3 mx-auto col-12 col-lg-8 "></div>

<div id="box" class="box">
    <div class="box-in"></div>
</div>

<div id="mySidenav" class="sidenav">
    <a href="javascript:void(0)" class="closebtn" onclick="closeNav()">&times;</a>
    <div id="barList" class="list-group"></div>
</div>
<div id="sidebarBtn" class="sidebarBtn" onclick="toggleNav()">
    <div class="barBtn-in"></div>
</div>

<script>
    window.onload = function () {
    };

    $(function () {
        $('[data-toggle="popover"]').popover()
    })

    var tmpScore = "<%= scores %>";
    score = tmpScore.split(',');
    for (var i = 0; i < score.length; i++) {
        score[i] = score[i].trim().split(' ');
        for (var j = 0; j < score[i].length; j++) {
            score[i][j] = parseFloat(score[i][j]);
        }
    }
    // console.log(score);

    var tmpNames = "<%= names %>";
    var names = tmpNames.split(',');
    for (var i = 0; i < names.length; i++) {
        names[i] = '>' + names[i].substring(4);
    }
    // console.log(names);

    var tmpSeq = "<%= seq %>";
    var seq = tmpSeq.split(',');
    // console.log(seq);

    var containerAll = document.querySelector('#allContainer');
    var sideNav = document.querySelector('.sidenav');
    var navCopy = sideNav.innerHTML;

    var threshold = 0.42;
    window.myline = [];

    $(".selectpicker").change(function () {
        var idList = $(".selectpicker").val();
        // console.log(idList);

        containerAll.innerHTML = "";

        sideNav.innerHTML = navCopy;
        $('[data-toggle="popover"]').popover();

        for (var i = 0; i < idList.length; i++) {

            var id = idList[i];

            var container = document.createElement("container");

            //Add a Button to show a popover with sequence
            var d = document.createElement('div');
            d.classList.add("row");
            d.classList.add("d-flex");
            d.classList.add("justify-content-center");

            var btn = document.createElement("button");
            btn.setAttribute("type", "button");
            btn.classList.add("btn");
            btn.classList.add("btn-secondary");
            btn.classList.add("btn-sm");
            btn.textContent = "Show Current Sequence";
            // btn.setAttribute("data-container", "body");
            btn.setAttribute("data-toggle", "popover");
            btn.setAttribute("data-placement", "top");
            var seqData = "";
            for (var k = 0; k < score[id].length; k++)
                if (seq[id][k] !== '-')
                    seqData += seq[id][k];
            btn.setAttribute("data-content", seqData);
            btn.onclick = function () {
            }
            d.appendChild(btn);

            // Add a button to start hmmer scan
            var btnScan = document.createElement('button');
            btnScan.classList.add("btn");
            btnScan.classList.add("btn-secondary");
            btnScan.classList.add("ml-2");
            btnScan.setAttribute("type", "button");
            btnScan.setAttribute("id", "hmmscan" + id);
            btnScan.onclick = function () {
                var cur = parseInt(this.id.substring(7));
                var seqscanData = "";
                for (var k = 0; k < score[cur].length; k++)
                    if (seq[cur][k] !== '-')
                        seqscanData += seq[cur][k];
                const scanData = { seq: seqscanData, name: names[cur] + "_NUMBER_" + cur };
                const scanURL = "/process/hmmscan";
                document.getElementById("hmmscan" + cur).setAttribute("disabled", "");
                $.post(scanURL, scanData, function (data, status) {
                    // console.log(data);
                    if (data.superfamily.length == 0) {
                        document.getElementById("family" + cur).innerText = "No Result";
                    }
                    else
                    {
                        document.getElementById("family" + cur).removeAttribute("disabled");

                        var card = document.getElementById("cardfamily" + cur);


                        // Generate colors for different familys
                        var r = [];
                        var g = [];
                        var b = [];
                        for (var k = 0; k < data.superfamily.length; k++) {
                            r.push(Math.floor(Math.random() * 255));
                            g.push(Math.floor(Math.random() * 255));
                            b.push(Math.floor(Math.random() * 255));
                        }

                        // Create a svg line graph
                        var svglength = containerAll.clientWidth * 0.95;

                        var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
                        card.appendChild(svg);
                        svg.setAttribute("width", svglength);
                        svg.setAttribute("height", "50");

                        var line = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                        svg.appendChild(line);
                        line.setAttribute("x", 0);
                        line.setAttribute("y", 15);
                        line.setAttribute("width", svglength);
                        line.setAttribute("height", 2);
                        line.setAttribute("style", "fill: rgb(187, 187, 187);");

                        for (var k = 0; k < data.superfamily.length; k++) {
                            for (var x = 0; x < data.seg[k].length / 2; x++) {
                                var rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
                                svg.appendChild(rect);
                                rect.setAttribute("y", 5);
                                rect.setAttribute("height", 20);

                                var start = data.seg[k][2 * x];
                                var end = data.seg[k][2 * x + 1];
                                var l = seqscanData.length;

                                rect.setAttribute("x", start / l * svglength);
                                rect.setAttribute("width", (end - start) / l * svglength);

                                rect.setAttribute("style", "fill: rgb(" + r[k] + ", " + g[k] + ", " + b[k] + ");opacity: 0.8;");
                            }
                        }


                        // Create the result table
                        var table = document.createElement("table");
                        table.classList.add("table");
                        card.appendChild(table);

                        var thead = document.createElement("thead");
                        var theadtr = document.createElement("tr");
                        var th1 = document.createElement("th");
                        th1.setAttribute("scope", "col");
                        th1.textContent = '#';
                        theadtr.appendChild(th1);
                        var th2 = document.createElement("th");
                        th2.setAttribute("scope", "col");
                        th2.textContent = 'Superfamily';
                        theadtr.appendChild(th2);
                        var th3 = document.createElement("th");
                        th3.setAttribute("scope", "col");
                        th3.textContent = 'E-value';
                        theadtr.appendChild(th3);
                        var th4 = document.createElement("th");
                        th4.setAttribute("scope", "col");
                        th4.textContent = 'Family';
                        theadtr.appendChild(th4);
                        var th5 = document.createElement("th");
                        th5.setAttribute("scope", "col");
                        th5.textContent = 'E-value';
                        theadtr.appendChild(th5);
                        var th6 = document.createElement("th");
                        th6.setAttribute("scope", "col");
                        th6.textContent = 'Segments';
                        theadtr.appendChild(th6);
                        thead.appendChild(theadtr);
                        table.appendChild(thead);

                        var tbody = document.createElement("tbody");
                        table.appendChild(tbody);
                        for (var k = 0; k < data.superfamily.length; k++) {
                            var tbodytr = document.createElement("tr");
                            tbody.appendChild(tbodytr);

                            var tbodyth = document.createElement("th");
                            tbodytr.appendChild(tbodyth);
                            tbodyth.setAttribute("scope", "row");

                            var colorbox = document.createElement("span");
                            tbodyth.appendChild(colorbox);
                            colorbox.classList.add("color-box");
                            colorbox.setAttribute("style", "background-color: " + "rgb(" + r[k] + ", " + g[k] + ", " + b[k] + ");");

                            var td1 = document.createElement("td");
                            tbodytr.appendChild(td1);
                            td1.textContent = data.superfamily[k];
                            var td2 = document.createElement("td");
                            tbodytr.appendChild(td2);
                            td2.textContent = data.supeval[k];
                            var td3 = document.createElement("td");
                            tbodytr.appendChild(td3);
                            td3.textContent = data.family[k];
                            var td4 = document.createElement("td");
                            tbodytr.appendChild(td4);
                            td4.textContent = data.fameval[k];
                            var td5 = document.createElement("td");
                            tbodytr.appendChild(td5);
                            for (var x = 0; x < data.seg[k].length / 2; x++) {
                                td5.textContent += data.seg[k][2 * x] + '~' + data.seg[k][2 * x + 1];
                                if (x != data.seg[k].length / 2 - 1) td5.textContent += " | ";
                            }
                        }
                    }

                });
            };
            btnScan.textContent = "hmmscan";
            d.appendChild(btnScan);

            // Add a button to show the scan result 
            var btnFamily = document.createElement('button');
            btnFamily.classList.add("btn");
            btnFamily.classList.add("btn-secondary");
            btnFamily.classList.add("ml-2");
            btnFamily.setAttribute("type", "button");
            btnFamily.setAttribute("data-toggle", "collapse");
            btnFamily.setAttribute("data-target", "#familyCollapse" + id);
            btnFamily.setAttribute("id", "family" + id);
            btnFamily.setAttribute("disabled", "");
            btnFamily.textContent = "famliy result";
            d.appendChild(btnFamily);

            container.appendChild(d);

            //////////////////////////////////////////////////
            //Add reset-zoom, pan-switch, drag-switch, print button
            var btnSet = document.createElement('div');
            btnSet.classList.add("btn-group");
            btnSet.classList.add("btn-group-sm");
            btnSet.classList.add("float-right");
            btnSet.classList.add("mt-3");

            var btnReset = document.createElement('button');
            btnReset.classList.add("btn");
            btnReset.classList.add("btn-secondary");
            btnReset.setAttribute("type", "button");
            btnReset.setAttribute("id", "resetZoom" + id);
            btnReset.onclick = function () {
                var cur = parseInt(this.id.substring(9));
                window.myline[cur].resetZoom();
            };
            btnReset.textContent = "Reset Zoom";

            var btnPan = document.createElement('button');
            btnPan.classList.add("btn");
            btnPan.classList.add("btn-secondary");
            btnPan.setAttribute("type", "button");
            btnPan.setAttribute("id", "pan-switch" + id);
            btnPan.onclick = function () {
                var cur = parseInt(this.id.substring(10));

                var chart = window.myline[cur];
                // console.log(chart.canvas);
                var panOptions = chart.options.plugins.zoom;
                panOptions.pan.enabled = !panOptions.pan.enabled;

                var zoomOptions = chart.options.plugins.zoom.zoom;
                if (panOptions.pan.enabled && zoomOptions.drag) zoomOptions.drag = !zoomOptions.drag;

                chart.update();
                document.getElementById('drag-switch' + cur).innerText = zoomOptions.drag ? 'Disable drag mode' : 'Enable drag mode';
                document.getElementById('pan-switch' + cur).innerText = panOptions.pan.enabled ? 'Disable Pan' : 'Enable Pan';
            };
            btnPan.textContent = "Disable Pan";

            var btnDrag = document.createElement('button');
            btnDrag.classList.add("btn");
            btnDrag.classList.add("btn-secondary");
            btnDrag.setAttribute("type", "button");
            btnDrag.setAttribute("id", "drag-switch" + id);
            btnDrag.onclick = function () {
                var cur = parseInt(this.id.substring(11));

                var chart = window.myline[cur];
                var zoomOptions = chart.options.plugins.zoom.zoom;
                zoomOptions.drag = !zoomOptions.drag;

                var panOptions = chart.options.plugins.zoom;
                if (panOptions.pan.enabled && zoomOptions.drag) panOptions.pan.enabled = !panOptions.pan.enabled;
                if (!panOptions.pan.enabled && !zoomOptions.drag) panOptions.pan.enabled = !panOptions.pan.enabled;

                chart.update();
                document.getElementById('drag-switch' + cur).innerText = zoomOptions.drag ? 'Disable drag mode' : 'Enable drag mode';
                document.getElementById('pan-switch' + cur).innerText = panOptions.pan.enabled ? 'Disable Pan' : 'Enable Pan';
            };
            btnDrag.textContent = "Enable drag mode";

            var btnShot = document.createElement('button');
            btnShot.classList.add("btn");
            btnShot.classList.add("btn-secondary");
            btnShot.setAttribute("type", "button");
            btnShot.setAttribute("id", "screenShot" + id);
            btnShot.onclick = function () {
                var cur = parseInt(this.id.substring(10));

                var chart = window.myline[cur];

                printClip(chart.canvas, chart.options.title.text);

            };
            btnShot.textContent = "Print";

            btnSet.appendChild(btnReset);
            btnSet.appendChild(btnPan);
            btnSet.appendChild(btnDrag);
            btnSet.appendChild(btnShot);

            container.appendChild(btnSet);

            //////////////////////////////////////////////////

            // draw chart
            var div = document.createElement("div");
            div.classList.add('chart-container');

            var canvas = document.createElement("canvas");
            div.appendChild(canvas);
            container.appendChild(div);

            var collapseDiv = document.createElement("div");
            collapseDiv.classList.add("collapse");
            collapseDiv.classList.add("mb-4");
            collapseDiv.setAttribute("id", "familyCollapse" + id);
            var cardfamily = document.createElement("div");
            cardfamily.classList.add("card");
            cardfamily.classList.add("card-body");
            cardfamily.setAttribute("id", "cardfamily" + id);
            collapseDiv.appendChild(cardfamily);
            container.appendChild(collapseDiv);

            var hr = document.createElement("hr");
            if (i < idList.length - 1) container.appendChild(hr);

            containerAll.appendChild(container);

            ///////////////////////////////////////////////////
            var xAxis = [];
            for (var j = 0; j <= score[id].length; j++) xAxis[j] = j + " : " + seq[id][j];
            // for (var j = 0; j <= score[this.id].length; j++) xAxis[j] = j;

            var overScore = [];
            var belowScore = [];
            for (var j = 0; j <= score[id].length; j++) {
                if (score[id][j] <= threshold) {
                    overScore[j] = "NaN";
                    belowScore[j] = score[id][j];
                    if (j > 0 && belowScore[j - 1] == 'NaN') overScore[j] = score[id][j];
                }
                else {
                    overScore[j] = score[id][j];
                    belowScore[j] = "NaN";
                    if (j > 0 && overScore[j - 1] == 'NaN') overScore[j - 1] = belowScore[j - 1];
                }
            }

            var chartData = {
                labels: xAxis,
                datasets: [{
                    type: 'line',
                    label: 'Score',
                    borderColor: 'rgb(255,255,0)',
                    pointStyle: "star",
                    pointBorderColor: 'rgb(0,0,255)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    fill: false,
                    lineTension: 0,
                    data: belowScore
                }, {
                    type: 'line',
                    label: 'Over Score',
                    borderColor: 'rgb(255,255,0)',
                    pointStyle: "star",
                    pointBorderColor: 'rgb(255,0,0)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    fill: false,
                    lineTension: 0,
                    data: overScore
                }]
            }

            var ctx = canvas.getContext('2d');
            window.myline[id] = new Chart(ctx, {
                type: 'line',
                data: chartData,
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: names[id]
                    },
                    legend: {
                        display: false
                    },
                    tooltips: {
                        callbacks: {
                            beforeLabel: function (tooltipItem, data) {
                                var beforeLabel = "Score: ";
                                beforeLabel += Math.round(tooltipItem.yLabel * 10000000) / 10000000;
                                if (Math.round(tooltipItem.yLabel * 10000000) / 10000000 >= threshold) beforeLabel += " (over)";
                                return beforeLabel;
                            },
                            label: function (tooltipItem, data) {
                                var label = "";
                                return label;
                            },
                            afterLabel: function (tooltipItem, data) {
                                var afterLabel = "";
                                for (var p = tooltipItem.index - 2; p < tooltipItem.index + 3; p++) {
                                    var ch = data.labels[p].substring(data.labels[p].indexOf(":") + 1);
                                    if (data.labels[p] == undefined) afterLabel += "- ";
                                    else if (p == tooltipItem.index) afterLabel += " '" + ch + " ' ";
                                    else afterLabel += ch + " ";
                                }
                                return afterLabel;
                            }
                        }
                    },
                    annotation: {
                        events: ["mouseover", "mouseout"],
                        annotations: [
                            {
                                id: "hline",
                                type: "line",
                                mode: "horizontal",
                                scaleID: "y-axis-0",
                                value: threshold,
                                borderColor: "black",
                                borderWidth: 5,
                                label: {
                                    backgroundColor: "red",
                                    content: "Threshold: " + threshold,
                                    enabled: false
                                },
                                onMouseover: function (e) {
                                    var element = this;
                                    element.options.borderWidth = 7;
                                    element.options.label.enabled = true;
                                    element.chartInstance.update();
                                    element.chartInstance.chart.canvas.style.cursor = 'pointer';
                                },
                                onMouseout: function (e) {
                                    var element = this;
                                    element.options.borderWidth = 4;
                                    element.chartInstance.update();
                                    setTimeout(function () {
                                        element.options.label.enabled = false;
                                        element.chartInstance.update();
                                    }, 0);
                                    element.chartInstance.chart.canvas.style.cursor = 'initial';
                                }
                            }]
                    }
                }
            })

            var chart = window.myline[id];
            var zoomOptions = chart.options.plugins.zoom.zoom;
            zoomOptions.enabled = !zoomOptions.enabled;
            // zoomOptions.drag = zoomOptions.drag;
            var panOptions = chart.options.plugins.zoom;
            panOptions.pan.enabled = !panOptions.pan.enabled;
            chart.update();
        }
        // enable each popover
        $('[data-toggle="popover"]').popover();


        //Add list to side bar
        var listGroup = document.getElementById("barList");
        for (var i = 0; i < idList.length; i++) {
            var id = idList[i];

            var a = document.createElement("button");
            a.textContent = names[id];
            a.classList.add("list-group-item");
            a.classList.add("list-group-item-action");
            a.classList.add("list-group-item-secondary");
            a.setAttribute("style", "font-size: 10px;");
            a.setAttribute("id", "goto" + id);
            a.onclick = function () {
                var cur = parseInt(this.id.substring(4));
                var element = document.querySelector("#resetZoom" + cur);
                var actualTop = element.offsetTop;
                var current = element.offsetParent;
                while (current !== null) {
                    actualTop += current.offsetTop;
                    current = current.offsetParent;
                }
                window.scrollTo({
                    top: actualTop - document.documentElement.clientHeight / 4,
                    behavior: "smooth"
                });
            };
            listGroup.appendChild(a);
        }

        // display the side bar or not
        var inside = document.getElementById("barList").innerHTML;
        if (inside.length > 0) document.getElementById("sidebarBtn").style.display = "block";
        else {
            document.getElementById("sidebarBtn").style.display = "none";
            document.getElementById("mySidenav").style.width = '0';
        }
    });

    // $('.reset-select').click(function () {
    //     $('.selectpicker').selectpicker('deselectAll');
    //     $('.selectpicker').selectpicker('refresh');
    // });

    window.onscroll = function () { scrollFunction() };

    function scrollFunction() {
        if (document.body.scrollTop > 20 || document.documentElement.scrollTop > 20) {
            document.getElementById("box").style.display = "block";
        } else {
            document.getElementById("box").style.display = "none";
        }
    }

    box.onclick = function () {
        window.scrollTo({
            top: 0,
            behavior: "smooth"
        });
    }

    function toggleNav() {
        var width = document.getElementById("mySidenav").style.width;
        if (width == '15%') document.getElementById("mySidenav").style.width = '0';
        else document.getElementById("mySidenav").style.width = '15%';
    }

    function closeNav() {
        document.getElementById("mySidenav").style.width = "0";
    }
</script>

<style type="text/css">
    /* show sequence window style */
    .popover {
        max-width: 50%;
        background-color: #6c757d;
    }

    .popover-body {
        color: white;
    }

    /* Return to Top Style */
    .box {
        display: none;
        position: fixed;
        right: 30px;
        bottom: 20px;
        height: 50px;
        width: 50px;
        text-align: center;
        padding-top: 20px;
        background-color: #6c757d;
        border-radius: 20%;
        overflow: hidden;
    }

    .box:hover:before {
        top: 50%
    }

    .box:hover .box-in {
        visibility: hidden;
    }

    .box:before {
        position: absolute;
        top: -50%;
        left: 50%;
        transform: translate(-50%, -50%);
        content: 'Top';
        width: 40px;
        color: white;
        font-weight: bold;

    }

    .box-in {
        visibility: visible;
        display: inline-block;
        height: 20px;
        width: 20px;
        border: 3px solid black;
        border-color: white transparent transparent white;
        transform: rotate(45deg);
    }

    /* sideBar style */
    .sidebarBtn {
        display: none;
        position: fixed;
        left: 0;
        bottom: 50%;
        height: 50px;
        width: 30px;
        text-align: center;
        padding-top: 15px;
        padding-right: 10px;
        background-color: #6c757d;
        border-radius: 20%;
        overflow: hidden;
    }

    .barBtn-in {
        visibility: visible;
        display: inline-block;
        height: 20px;
        width: 20px;
        border: 3px solid white;
        border-color: white transparent transparent white;
        transform: rotate(135deg);
    }

    .sidenav {
        height: 100%;
        width: 0;
        position: fixed;
        z-index: 1;
        top: 0;
        left: 0;
        background-color: #6c757d;
        overflow-x: hidden;
        transition: 0.5s;
        padding-top: 60px;
    }

    .sidenav a {
        padding: 8px 8px 8px 32px;
        text-decoration: none;
        font-size: 25px;
        color: white;
        display: block;
        transition: 0.3s;
    }

    .sidenav a:hover,
    .offcanvas a:focus {
        color: black;
    }

    .sidenav .closebtn {
        position: absolute;
        top: 0;
        right: 25px;
        font-size: 36px;
        margin-left: 50px;
    }

    @media screen and (max-height: 450px) {
        .sidenav {
            padding-top: 15px;
        }

        .sidenav a {
            font-size: 18px;
        }
    }

    .color-box {
        width: 15px;
        height: 15px;
        display: inline-block;
    }

    hr {
        size: 3;
        color: blue;
    }
</style>

<% include partials/footer%>