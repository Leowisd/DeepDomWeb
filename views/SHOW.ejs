<% include partials/header %>

<nav class="navbar navbar-expand-md navbar-light bg-light">
    <a class="navbar-brand" href="/">DeepDom</a>
    <button class="navbar-toggler ml-3" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/upload"><i class="fas fa-home"></i> Upload </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/jobs"><i class="fas fa-search"></i> Search </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/jobs/all"><i class="fas fa-list"></i> Status </a>
            </li>
        </ul>
    </div>
</nav>

<!-- <div class="container"> -->
<div class="jumbotron jumbotron-fluid text-center">
    <div class="container">
        <h1 class="display-4"><span class="border-bottom border-dark p-1">DeepDom</span></h1>
        <p class="lead d-none d-sm-block">An ab-initio method for protein domain boundary prediction</p>
    </div>
</div>
<!-- </div> -->

<div class='d-none' id='name'>
    <% results.forEach(function(element){ %>
    <%= element.name%>,
    <% }) %>
</div>
<p class='d-none' id='score'>
    <% results.forEach(function(element){ %>
    <%= element.score %>,
    <% }) %>
</p>
<p class='d-none' id='seq'>
    <% seq.forEach(function(element){ %>
    <%= element%>,
    <% }) %>
</p>

<div class="container col-12 col-lg-8 col-xl-6">
    <div class="btn-toolbar d-flex justify-content-start" role="toolbar" aria-label="Toolbar with button group">
        <div class="btn-group mr-2" role="group" aria-label="First group">
            <% var address = "/jobs/download/:" + file%>
            <a class="btn btn-secondary" href="<%= address%>">
                Download Result
            </a>
        </div>

        <div class="btn-group mt-4 mt-sm-0" role="group" aria-label="Second group">
            <select class="selectpicker show-tick" data-style="btn-secondary" data-width="fit" data-live-search="true"
                title="Choose one of the following...">
                <% var i = 0;%>
                <% results.forEach(function(element){ %>
                <option value="<%= i%>"> <%= element.name.trim()%></option>
                <% i = i + 1;%>
                <% }) %>
            </select>
        </div>
    </div>
</div>

<div class="container-border mt-4 mx-auto col-12 col-lg-8 col-xl-6"></div>

<script>
    // window.onload = function () {
    // };

    var names = document.getElementById('name').textContent.replace(/\ +/g, "").replace(/[\r\n]/g, "").split(',');
    names.length -= 2;
    // console.log(names);

    var score = document.getElementById('score').textContent.replace(/[\r\n]/g, "").split(',');
    for (var i = 0; i < score.length; i++) {
        score[i] = score[i].trim().split(' ');
        for (var j = 0; j < score[i].length; j++) {
            score[i][j] = parseFloat(score[i][j]);
        }
    }
    score.length -= 2;
    // console.log(score);

    var seq = document.getElementById('seq').textContent.replace(/\ +/g, "").replace(/[\r\n]/g, "").split(',');
    seq.length -= 1;
    // console.log(seq);

    var container = document.querySelector('.container-border');

    $(".selectpicker").change(function () {
        var id = $(".selectpicker").val();
        console.log(id);
        container.innerHTML = "";

        //Add a Button to show a collapse with sequence
        var d = document.createElement('div');
        d.classList.add("row");
        d.classList.add("d-flex");
        d.classList.add("justify-content-center");

        var btn = document.createElement("button");
        btn.setAttribute("type", "button");
        btn.classList.add("btn");
        btn.classList.add("btn-secondary");
        btn.classList.add("btn-sm");
        btn.textContent = "Show Current Sequence";
        // btn.setAttribute("data-container", "body");
        btn.setAttribute("data-toggle", "popover");
        btn.setAttribute("data-placement", "top");
        var seqData = "";
        for (var k = 0; k < score[id].length; k++)
            if (seq[id][k] !== '-')
                seqData += seq[id][k];
        btn.setAttribute("data-content", seqData);
        d.appendChild(btn);

        container.appendChild(d);
        $('[data-toggle="popover"]').popover()

        //////////////////////////////////////////////////
        //Add reset-zoom, pan-switch, drag-switch button
        var btnSet = document.createElement('div');
        btnSet.classList.add("btn-group");
        btnSet.classList.add("btn-group-sm");
        btnSet.classList.add("float-right");
        btnSet.classList.add("mt-3");

        var btnReset = document.createElement('button');
        btnReset.classList.add("btn");
        btnReset.classList.add("btn-secondary");
        btnReset.setAttribute("type", "button");
        btnReset.setAttribute("id", "resetZoom");
        btnReset.setAttribute("onclick", "resetZoom()");
        btnReset.textContent = "Reset Zoom";

        var btnPan = document.createElement('button');
        btnPan.classList.add("btn");
        btnPan.classList.add("btn-secondary");
        btnPan.setAttribute("type", "button");
        btnPan.setAttribute("id", "pan-switch");
        btnPan.setAttribute("onclick", "togglePan()");
        btnPan.textContent = "Disable Pan";

        var btnDrag = document.createElement('button');
        btnDrag.classList.add("btn");
        btnDrag.classList.add("btn-secondary");
        btnDrag.setAttribute("type", "button");
        btnDrag.setAttribute("id", "drag-switch");
        btnDrag.setAttribute("onclick", "toggleDragMode()");
        btnDrag.textContent = "Enable drag mode";

        btnSet.appendChild(btnReset);
        btnSet.appendChild(btnPan);
        btnSet.appendChild(btnDrag);

        container.appendChild(btnSet);

        //////////////////////////////////////////////////

        // draw chart
        var div = document.createElement("div");
        div.classList.add('chart-container');

        var canvas = document.createElement("canvas");
        div.appendChild(canvas);
        container.appendChild(div);

        var xAxis = [];
        for (var j = 0; j <= score[id].length; j++) xAxis[j] = j + " : " + seq[id][j];
        // for (var j = 0; j <= score[this.id].length; j++) xAxis[j] = j;
        var gap = [];
        for (var j = 0; j <= score[id].length; j++) gap[j] = 0.45;
        var overScore = [];
        var belowScore = [];
        for (var j = 0; j <= score[id].length; j++) {
            if (score[id][j] <= gap[j]) {
                overScore[j] = "NaN";
                belowScore[j] = score[id][j];
                if (j > 0 && belowScore[j - 1] == 'NaN') overScore[j] = score[id][j];
            }
            else {
                overScore[j] = score[id][j];
                belowScore[j] = "NaN";
                if (j > 0 && overScore[j - 1] == 'NaN') overScore[j - 1] = belowScore[j - 1];
            }
        }

        var chartData = {
            labels: xAxis,
            datasets: [{
                type: 'line',
                label: 'Score Gap',
                // backgroundColor: 'rgb(0, 0, 0)',
                borderColor: 'rgb(0, 0, 0)',
                borderWidth: 2,
                fill: false,
                borderDash: [3, 3],
                pointRadius: 1,
                pointHoverRadius: 5,
                data: gap
            }, {
                type: 'line',
                label: 'Score',
                borderColor: 'rgb(255,255,0)',
                pointStyle: "star",
                pointBorderColor: 'rgb(0,0,255)',
                backgroundColor: 'rgba(0, 0, 0, 0)',
                fill: false,
                lineTension: 0,
                data: belowScore
            }, {
                type: 'line',
                label: 'Over Score',
                borderColor: 'rgb(255,255,0)',
                pointStyle: "star",
                pointBorderColor: 'rgb(255,0,0)',
                backgroundColor: 'rgba(0, 0, 0, 0)',
                fill: false,
                lineTension: 0,
                data: overScore
            }]
        }

        var ctx = canvas.getContext('2d');
        window.myline = new Chart(ctx, {
            type: 'line',
            data: chartData,
            options: {
                responsive: true,
                title: {
                    display: true,
                    text: names[id]
                },
                scales: {
                    xAxes: [{
                        // stacked: true,
                        // display: true
                    }],
                    yAxes: [{
                        // stacked: true
                    }]
                },
                // pan: {
                //     // Boolean to enable panning
                //     enabled: true,

                //     // Panning directions. Remove the appropriate direction to disable 
                //     // Eg. 'y' would only allow panning in the y direction
                //     mode: 'xy'
                // },

                // Container for zoom options
                // zoom: {
                //     // Boolean to enable zooming
                //     enabled: true,

                //     // Zooming directions. Remove the appropriate direction to disable 
                //     // Eg. 'y' would only allow zooming in the y direction
                //     mode: 'xy',

                //     speed: 0.2
                // }

                // tooltips: {
                //     // Disable the on-canvas tooltip
                //     enabled: false,

                //     custom: function (tooltipModel) {
                //         // Tooltip Element
                //         var tooltipEl = document.getElementById('chartjs-tooltip');

                //         // Create element on first render
                //         if (!tooltipEl) {
                //             tooltipEl = document.createElement('div');
                //             tooltipEl.id = 'chartjs-tooltip';
                //             tooltipEl.innerHTML = "<table></table>";
                //             document.body.appendChild(tooltipEl);
                //         }

                //         // Hide if no tooltip
                //         if (tooltipModel.opacity === 0) {
                //             tooltipEl.style.opacity = 0;
                //             return;
                //         }

                //         // Set caret Position
                //         tooltipEl.classList.remove('above', 'below', 'no-transform');
                //         if (tooltipModel.yAlign) {
                //             tooltipEl.classList.add(tooltipModel.yAlign);
                //         } else {
                //             tooltipEl.classList.add('no-transform');
                //         }

                //         function getBody(bodyItem) {
                //             return bodyItem.lines;
                //         }

                //         // Set Text
                //         if (tooltipModel.body) {
                //             var titleLines = tooltipModel.title || [];
                //             var bodyLines = tooltipModel.body.map(getBody);

                //             var innerHtml = '<thead>';

                //             titleLines.forEach(function (title) {
                //                 innerHtml += '<tr><th>' + title + '</th></tr>';
                //             });
                //             innerHtml += '</thead><tbody>';

                //             bodyLines.forEach(function (body, i) {
                //                 var colors = tooltipModel.labelColors[i];
                //                 var style = 'background:' + colors.backgroundColor;
                //                 style += '; border-color:' + colors.borderColor;
                //                 style += '; border-width: 2px';
                //                 var span = '<span style="' + style + '"></span>';
                //                 innerHtml += '<tr><td>' + span + body + '</td></tr>';
                //             });
                //             innerHtml += '</tbody>';

                //             var tableRoot = tooltipEl.querySelector('table');
                //             tableRoot.innerHTML = innerHtml;
                //         }

                //         // `this` will be the overall tooltip
                //         var position = this._chart.canvas.getBoundingClientRect();

                //         // Display, position, and set styles for font
                //         tooltipEl.style.opacity = 1;
                //         tooltipEl.style.position = 'absolute';
                //         tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
                //         tooltipEl.style.top = position.top + tooltipModel.caretY + 'px';
                //         tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
                //         tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
                //         tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
                //         tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
                //     }
                // }
            }
        })

        var chart = window.myline;
        var zoomOptions = chart.options.plugins.zoom.zoom;
        zoomOptions.enabled = !zoomOptions.enabled;
        // zoomOptions.drag = zoomOptions.drag;
        var panOptions = chart.options.plugins.zoom;
        panOptions.pan.enabled = !panOptions.pan.enabled;
        chart.update();
    });

    window.resetZoom = function () {
        window.myline.resetZoom();
    };

    window.togglePan = function () {
        var chart = window.myline;
        var panOptions = chart.options.plugins.zoom;
        panOptions.pan.enabled = !panOptions.pan.enabled;

        var zoomOptions = chart.options.plugins.zoom.zoom;
        if (panOptions.pan.enabled && zoomOptions.drag) zoomOptions.drag = !zoomOptions.drag;

        chart.update();
        document.getElementById('drag-switch').innerText = zoomOptions.drag ? 'Disable drag mode' : 'Enable drag mode';
        document.getElementById('pan-switch').innerText = panOptions.pan.enabled ? 'Disable Pan' : 'Enable Pan';
    };

    window.toggleDragMode = function () {
        var chart = window.myline;
        var zoomOptions = chart.options.plugins.zoom.zoom;
        zoomOptions.drag = !zoomOptions.drag;

        var panOptions = chart.options.plugins.zoom;
        if (panOptions.pan.enabled && zoomOptions.drag) panOptions.pan.enabled = !panOptions.pan.enabled;
        if (!panOptions.pan.enabled && !zoomOptions.drag) panOptions.pan.enabled = !panOptions.pan.enabled;

        chart.update();
        document.getElementById('drag-switch').innerText = zoomOptions.drag ? 'Disable drag mode' : 'Enable drag mode';
        document.getElementById('pan-switch').innerText = panOptions.pan.enabled ? 'Disable Pan' : 'Enable Pan';
    };

</script>

<style type="text/css">
    .popover{
        max-width:50%;
        background-color: #6c757d;
    }
    .popover-body{
        color: white;
    }
</style>

<% include partials/footer%>