<% include partials/header %>

<nav class="navbar navbar-expand-md navbar-light bg-light">
    <a class="navbar-brand" href="/">DeepDom</a>
    <button class="navbar-toggler ml-3" type="button" data-toggle="collapse" data-target="#navbarSupportedContent"
        aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
        <span class="navbar-toggler-icon"></span>
    </button>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" href="/upload"><i class="fas fa-home"></i> Upload </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/jobs"><i class="fas fa-search"></i> Search </a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/jobs/all"><i class="fas fa-list"></i> Status </a>
            </li>
        </ul>
    </div>
</nav>

<!-- <div class="container"> -->
<div class="jumbotron jumbotron-fluid text-center">
    <div class="container">
        <h1 class="display-4"><span class="border-bottom border-dark p-1">DeepDom</span></h1>
        <p class="lead d-none d-sm-block">An ab-initio method for protein domain boundary prediction</p>
    </div>
</div>
<!-- </div> -->

<div class='d-none' id='name'>
    <% results.forEach(function(element){ %>
    <%= element.name%>,
    <% }) %>
</div>
<p class='d-none' id='score'>
    <% results.forEach(function(element){ %>
    <%= element.score %>,
    <% }) %>
</p>
<p class='d-none' id='seq'>
    <% seq.forEach(function(element){ %>
    <%= element%>,
    <% }) %>
</p>

<div class="container">
    <div class="btn-toolbar d-flex justify-content-center" role="toolbar" aria-label="Toolbar with button group">
        <div class="btn-group mr-4" role="group" aria-label="First group">
            <% var address = "/jobs/download/:" + file%>
            <a class="btn btn-primary" href="<%= address%>">
                Download Result
            </a>
        </div>

        <div class="btn-group dropright  mt-4 mt-sm-0" role="group" aria-label="Second group">
            <button class="btn btn-primary dropdown-toggle" type="button" id="dropdownMenu" data-toggle="dropdown"
                aria-haspopup="true" aria-expanded="false">
                Choose one result to show
            </button>
            <div class="dropdown-menu" aria-labelledby="dropdownMenu">
                <% var i = 0;%>
                <% results.forEach(function(element){ %>
                <button class="dropdown-item" type="button" id="<%= i %>"> <%= element.name.trim()%></button>
                <% i = i + 1;%>
                <% }) %>
            </div>
        </div>
    </div>
</div>

<div class="container-border mt-4 mx-auto col-12 col-lg-8 col-xl-6"></div>

<script>
    window.onload = function () {
    };


    var names = document.getElementById('name').textContent.replace(/\ +/g, "").replace(/[\r\n]/g, "").split(',');
    names.length -= 2;
    // console.log(names);

    var score = document.getElementById('score').textContent.replace(/[\r\n]/g, "").split(',');
    for (var i = 0; i < score.length; i++) {
        score[i] = score[i].trim().split(' ');
        for (var j = 0; j < score[i].length; j++) {
            score[i][j] = parseFloat(score[i][j]);
        }
    }
    score.length -= 2;
    console.log(score);

    var seq = document.getElementById('seq').textContent.replace(/\ +/g, "").replace(/[\r\n]/g, "").split(',');
    seq.length -= 2;
    console.log(seq);

    var container = document.querySelector('.container-border');
    for (var i = 0; i < score.length; i++) {
        document.getElementById(i).onclick = function () {
            container.innerHTML = "";

            //Add a Button to show a collapse with sequence
            var d = document.createElement('div');
            d.classList.add("row");
            d.classList.add("d-flex");
            d.classList.add("justify-content-center");

            var btn = document.createElement("button");
            btn.classList.add("btn");
            btn.classList.add("btn-primary");
            btn.classList.add("btn");
            btn.textContent = "Show Current Sequence";
            btn.setAttribute("data-target", "#collapseExample");
            btn.setAttribute("type", "button");
            btn.setAttribute("data-toggle", "collapse");
            btn.setAttribute("aria-expanded", "false");
            btn.setAttribute("aria-controls", "collapseExample");
            d.appendChild(btn);

            var collapse = document.createElement("div");
            collapse.classList.add("collapse");
            collapse.setAttribute("id", "collapseExample");
            var card = document.createElement("div");
            card.classList.add("card");
            card.classList.add("card-body");
            card.classList.add("text-center");
            for (var k = 0; k < score[this.id].length; k++)
                if (seq[this.id][k] !== '-')
                    card.textContent += k+1 + ':' + seq[this.id][k] + ' ';
            collapse.appendChild(card);

            container.appendChild(d);
            container.appendChild(collapse);
            //////////////////////////////////////////////////

            // draw chart
            var div = document.createElement("div");
            div.classList.add('chart-container');

            var canvas = document.createElement("canvas");
            div.appendChild(canvas);
            container.appendChild(div);

            var xAxis = [];
            for (var j = 0; j <= score[this.id].length; j++) xAxis[j] = j + " : " + seq[this.id][j];
            // for (var j = 0; j <= score[this.id].length; j++) xAxis[j] = j;
            var gap = [];
            for (var j = 0; j <= score[this.id].length; j++) gap[j] = 0.45;
            var overScore = [];
            var belowScore = [];
            for (var j = 0; j <= score[this.id].length; j++) {
                if (score[this.id][j] <= gap[j]) {
                    overScore[j] = "NaN";
                    belowScore[j] = score[this.id][j];
                    if (j > 0 && belowScore[j - 1] == 'NaN') overScore[j] = score[this.id][j];
                }
                else {
                    overScore[j] = score[this.id][j];
                    belowScore[j] = "NaN";
                    if (j > 0 && overScore[j - 1] == 'NaN') overScore[j - 1] = belowScore[j - 1];
                }
            }

            var chartData = {
                labels: xAxis,
                datasets: [{
                    type: 'line',
                    label: 'Score Gap',
                    // backgroundColor: 'rgb(0, 0, 0)',
                    borderColor: 'rgb(0, 0, 0)',
                    borderWidth: 2,
                    fill: false,
                    borderDash: [3, 3],
                    pointRadius: 1,
                    pointHoverRadius: 5,
                    data: gap
                }, {
                    type: 'line',
                    label: 'Score',
                    borderColor: 'rgb(255,255,0)',
                    pointStyle: "star",
                    pointBorderColor: 'rgb(0,0,255)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    fill: false,
                    lineTension: 0,
                    data: belowScore
                }, {
                    type: 'line',
                    label: 'Over Score',
                    borderColor: 'rgb(255,255,0)',
                    pointStyle: "star",
                    pointBorderColor: 'rgb(255,0,0)',
                    backgroundColor: 'rgba(0, 0, 0, 0)',
                    fill: false,
                    lineTension: 0,
                    data: overScore
                }]
            }

            var ctx = canvas.getContext('2d');
            new Chart(ctx, {
                type: 'line',
                data: chartData,
                options: {
                    responsive: true,
                    title: {
                        display: true,
                        text: names[this.id]
                    },
                    scales: {
                        xAxes: [{
                            // stacked: true,
                            // display: true
                        }],
                        yAxes: [{
                            // stacked: true
                        }]
                    },
                    pan: {
                        // Boolean to enable panning
                        enabled: true,

                        // Panning directions. Remove the appropriate direction to disable 
                        // Eg. 'y' would only allow panning in the y direction
                        mode: 'xy'
                    },

                    // Container for zoom options
                    zoom: {
                        // Boolean to enable zooming
                        enabled: true,
                        // drag: true,

                        // Zooming directions. Remove the appropriate direction to disable 
                        // Eg. 'y' would only allow zooming in the y direction
                        mode: 'xy',

                        speed: 0.2
                    }

                    // tooltips: {
                    //     // Disable the on-canvas tooltip
                    //     enabled: false,

                    //     custom: function (tooltipModel) {
                    //         // Tooltip Element
                    //         var tooltipEl = document.getElementById('chartjs-tooltip');

                    //         // Create element on first render
                    //         if (!tooltipEl) {
                    //             tooltipEl = document.createElement('div');
                    //             tooltipEl.id = 'chartjs-tooltip';
                    //             tooltipEl.innerHTML = "<table></table>";
                    //             document.body.appendChild(tooltipEl);
                    //         }

                    //         // Hide if no tooltip
                    //         if (tooltipModel.opacity === 0) {
                    //             tooltipEl.style.opacity = 0;
                    //             return;
                    //         }

                    //         // Set caret Position
                    //         tooltipEl.classList.remove('above', 'below', 'no-transform');
                    //         if (tooltipModel.yAlign) {
                    //             tooltipEl.classList.add(tooltipModel.yAlign);
                    //         } else {
                    //             tooltipEl.classList.add('no-transform');
                    //         }

                    //         function getBody(bodyItem) {
                    //             return bodyItem.lines;
                    //         }

                    //         // Set Text
                    //         if (tooltipModel.body) {
                    //             var titleLines = tooltipModel.title || [];
                    //             var bodyLines = tooltipModel.body.map(getBody);

                    //             var innerHtml = '<thead>';

                    //             titleLines.forEach(function (title) {
                    //                 innerHtml += '<tr><th>' + title + '</th></tr>';
                    //             });
                    //             innerHtml += '</thead><tbody>';

                    //             bodyLines.forEach(function (body, i) {
                    //                 var colors = tooltipModel.labelColors[i];
                    //                 var style = 'background:' + colors.backgroundColor;
                    //                 style += '; border-color:' + colors.borderColor;
                    //                 style += '; border-width: 2px';
                    //                 var span = '<span style="' + style + '"></span>';
                    //                 innerHtml += '<tr><td>' + span + body + '</td></tr>';
                    //             });
                    //             innerHtml += '</tbody>';

                    //             var tableRoot = tooltipEl.querySelector('table');
                    //             tableRoot.innerHTML = innerHtml;
                    //         }

                    //         // `this` will be the overall tooltip
                    //         var position = this._chart.canvas.getBoundingClientRect();

                    //         // Display, position, and set styles for font
                    //         tooltipEl.style.opacity = 1;
                    //         tooltipEl.style.position = 'absolute';
                    //         tooltipEl.style.left = position.left + tooltipModel.caretX + 'px';
                    //         tooltipEl.style.top = position.top + tooltipModel.caretY + 'px';
                    //         tooltipEl.style.fontFamily = tooltipModel._bodyFontFamily;
                    //         tooltipEl.style.fontSize = tooltipModel.bodyFontSize + 'px';
                    //         tooltipEl.style.fontStyle = tooltipModel._bodyFontStyle;
                    //         tooltipEl.style.padding = tooltipModel.yPadding + 'px ' + tooltipModel.xPadding + 'px';
                    //     }
                    // }
                }
            })
        };
    };

</script>

<% include partials/footer%>